name: publish-release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  release:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Extract static-tcpdump
        id: extract
        uses: shrink/actions-docker-extract@v2
        with:
          image: "maintained/tcpdump"
          path: "/usr/bin/tcpdump"
      - uses: actions/upload-artifact@v3
        with:
          name: static-tcpdump
          path: ${{ steps.extract.outputs.destination }}
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  build-mac:
    runs-on: macos-latest
    needs: release
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: actions/download-artifact@v3
        with:
          name: static-tcpdump
      - run: mv tcpdump static-tcpdump

      - run: cd ui && yarn && yarn electron:build-server && yarn electron:build:pro --mac && ls build

      - name: Upload Release Asset For dmg
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ui/build/k8z-0.0.1.dmg
          asset_name: k8z-0.0.1.dmg
          asset_content_type: application/x-tg